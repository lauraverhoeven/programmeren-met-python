total of energy practices: 

waterforce: "E007022 "         "E006587 "
total wind:E007022             "E006588 "  
total sun: E007022             "E006589" 


Years: 2017, 2018
years=["2017JJ00",
       "2018JJ00"]

waterforce                           BrutoEindverbruik_1"                            "VermedenEmissie_5"
"143";"E006587 ";"E007022 ";"2017JJ00";"     339";"    0.02";"     761";"    0.02";"      56";"    0.03"
"144";"E006587 ";"E007022 ";"2018JJ00";"     340";"    0.02";"     761";"    0.02";"      56";"    0.03"


wind:
"259";"E006588 ";"E007022 ";"2017JJ00";"   34710";"    1.64";"   82374";"    2.60";"    6022";"    3.65"
"260";"E006588 ";"E007022 ";"2018JJ00";"   36106";"    1.71";"   84033";"    2.70";"    6143";"    3.81"


sun:
"607";"E006589 ";"E007022 ";"2017JJ00";"    9080";"    0.43";"   18984";"    0.60";"    1368";"    0.83"
"608";"E006589 ";"E007022 ";"2018JJ00";"   14451";"    0.68";"   31017";"    1.00";"    2247";"    1.39"

calculation per source (per year:
(Vermeden emissie van kooldioxide (CO2))/(Bruto eindverbruik hernieuwbare energie)
 "VermedenEmissie_5" /"BrutoEindverbruik_1"
 
 sep=t";"
 def PrepairDataBar(data):
    year=  "2018JJ00"

 def PrepairDataline
 
 print(df.loc[1:3,"murders_2014"]) 
 sorted_df=df.sort_values("murders_2014",ascending=False)
 print(df["murders_2014"].hist(bins=df["murders_2014"].max())) 
 names.sort()

 Years: print(re.findall("(?i)pdf", "PDF, pdf, or Pdf?")) 
 newtext = re.sub("wood|chuck|woodchuck", "gotcha!", text) print(newtext)
 str.replace
   
years= [" "]

yearimp= int(imput("what years do you want to have efficiencies of?")
years.append(yearimp)
use slicing

words=text.split( )
# use map to strip , and . from the words
print("Strip words:")
clean= list(map(lambda x: x.strip(",."),words))

list comprehension gebruiken om aan elk jaar een JJOO toe te voegen:

 
 def PrepairDataline
 
 
 def Calc
 data["efficency"] = np.where(data["VermedenEmissie_5" ], data["BrutoEindverbruik_1"], data["VermedenEmissie_5" ]/data["BrutoEindverbruik_1"])
print(data.sort_values('Protein/Sugar', ascending=False).head(3))
 
 def Barchart
 menu.groupby('Category')['Item'].count().plot(kind='bar')
plt.show()
pd.pivot_table(menu, index=['Item'], values=['Vitamin C (% Daily Value)']).sort_values(['Vitamin C (% Daily Value)'], ascending=False)[:10].plot(kind="bar")
plt.show()

def Linechart
x=[year]
y=[division]
plt.plot(x,y) plt.show()
plt.plot(x,y, color="r", marker="o") 
plt.title("Efficiency over the years") 
plt.xlabel("years") 
plt.ylabel("Eficiency(Kton/Tjoule)") 
